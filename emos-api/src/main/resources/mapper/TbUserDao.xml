<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.emos.api.db.dao.TbUserDao">
    <insert id="insert" parameterType="tbUser" useGeneratedKeys="true" keyProperty="id">
        insert into tb_user
        set
        <if test="username!=null">
            username = #{username},
        </if>
        <if test="password!=null">
            password = HEX(AES_ENCRYPT(#{password},#{username})),
        </if>
        <if test="openId!=null">
            open_id = #{openId},
        </if>
        <if test="nickname!=null">
            nickname = #{nickname},
        </if>
        <if test="photo!=null">
            photo = #{photo},
        </if>
        <if test="name!=null">
            name = #{name},
        </if>
        <if test="sex!=null">
            sex = #{sex},
        </if>
        <if test="tel!=null">
            tel = #{tel},
        </if>
        <if test="email!=null">
            email=#{email},
        </if>
        <if test="hiredate!=null">
            hiredate = #{hiredate},
        </if>
        role = #{role},
        <if test="root!=null">
            root = #{root},
        </if>
        <if test="deptId!=null">
            dept_id = #{deptId},
        </if>
        status = #{status},
        create_time = #{createTime}
    </insert>

    <update id="updatePassword" parameterType="hashmap">
        update tb_user
        set password = HEX(AES_ENCRYPT(#{newPassword}, username))
        where id = #{userId}
        and password = HEX(AES_ENCRYPT(#{password}, username))
    </update>
    <update id="update" parameterType="hashmap">
        update tb_user
        set
        <if test="username!=null and password!=null">
            username = #{username},
            password = HEX(AES_ENCRYPT(#{password},#{username})),
        </if>
        <if test="name!=null">
            name = #{name},
        </if>
        <if test="sex!=null">
            sex = #{sex},
        </if>
        <if test="tel!=null">
            tel = #{tel},
        </if>
        <if test="email!=null">
            email = #{email},
        </if>
        <if test="hiredate!=null">
            hiredate = #{hiredate},
        </if>
        <if test="role!=null">
            role = #{role},
        </if>
        <if test="root!=null">
            root = #{root},
        </if>
        <if test="deptId!=null">
            dept_id = #{deptId},
        </if>
        <if test="status!=null">
            status = #{status},
        </if>
        id = id
        where id = #{userId}
    </update>
    <update id="setPhoto" parameterType="hashmap">
        update tb_user
        set photo = #{url}
        where id = #{id}
    </update>
    <delete id="deleteUserByIds">
        delete from tb_user
        where id in
        <foreach collection="array" open="(" separator="," close=")" item="one">
            #{one}
        </foreach>
        and root = false
    </delete>


    <select id="searchUserPermissions" parameterType="int" resultType="String">
        SELECT DISTINCT p.permission_name
        FROM tb_user u
        JOIN tb_role r ON JSON_CONTAINS(u.role, CAST(r.id AS CHAR))
        JOIN tb_permission p ON JSON_CONTAINS(r.permissions, CAST(p.id AS CHAR))
        WHERE u.id = #{userId}
        AND u.status = 1
    </select>
    <select id="searchIdByOpenId" parameterType="String" resultType="Integer">
        SELECT id FROM tb_user WHERE open_id=#{openId} AND status = 1
    </select>

    <select id="searchUserSummary" parameterType="int" resultType="HashMap">
        SELECT u.name, u.photo, d.dept_name AS deptName
        FROM tb_user u LEFT JOIN tb_dept d ON u.dept_id=d.id
        WHERE u.id=#{userId} AND u.status=1
    </select>
    
    <select id="searchUserInfo" parameterType="int" resultType="HashMap">
        SELECT
            u.open_id AS openId,
            u.nickname,
            u.name,
            u.photo,
            u.sex,
            u.tel,
            u.email,
            d.dept_name AS dept,
            u.hiredate,
            u.status,
            ( SELECT GROUP_CONCAT( role_name separator "，" ) FROM tb_role WHERE JSON_CONTAINS ( u.role, CONVERT ( id, CHAR ) ) ) AS roles
        FROM tb_user u
        LEFT JOIN tb_dept d ON u.dept_id = d.id
        WHERE u.id = #{userId} AND u.status = 1
    </select>
    <select id="searchDeptManagerId" parameterType="int" resultType="Integer">
        SELECT u2.id
        FROM tb_user u1 JOIN tb_user u2 ON u1.dept_id=u2.dept_id
        JOIN tb_role r ON JSON_CONTAINS(u2.role, CAST(r.id AS CHAR))
        WHERE u1.id=#{id} AND r.id=2 AND u1.status = 1 AND u2.status = 1
        ORDER BY u2.create_time DESC
        LIMIT 1
    </select>
    <select id="searchGmId" resultType="Integer">
        SELECT u.id
        FROM tb_user u
        JOIN tb_role r ON JSON_CONTAINS(u.role, CAST(r.id AS CHAR))
        WHERE r.id=1 AND u.status = 1
        ORDER BY u.create_time DESC
        LIMIT 1
    </select>
    <select id="searchById" parameterType="int" resultType="HashMap">
        SELECT
            id, username, name, sex, tel, email, hiredate, role, dept_id AS deptId, status,
            CAST(AES_DECRYPT(UNHEX(password),username) AS CHAR) AS password
        FROM tb_user
        WHERE id=#{userId}
    </select>
    <select id="searchAllUser" resultType="HashMap">
        SELECT id,`name`
        FROM tb_user
        WHERE status = 1
    </select>
    <select id="login" resultType="java.lang.Integer" parameterType="hashmap">
        select id
        from tb_user
        where username = #{username}
        AND password = HEX(AES_ENCRYPT(#{password}, #{username}))
        limit 1
    </select>
    <select id="searchUserByPage" resultType="java.util.HashMap" parameterType="hashmap">
        select
            DISTINCT u.id,
            u.name,
            u.sex,
            u.tel,
            u.email,
            d.dept_name AS dept,
            u.hiredate,
            u.root,
            u.status,
            (select GROUP_CONCAT(role_name separator "，") from tb_role where JSON_CONTAINS (u.role, CONVERT(id, CHAR ) ) ) AS roles
            from tb_user u
            join tb_role r on JSON_CONTAINS(u.role, CONVERT(r.id, CHAR ))
            left join tb_dept d on u.dept_id = d.id
            WHERE 1=1
            <if test="name!=null">
                AND u.name LIKE "%${name}%"
            </if>
            <if test="sex!=null">
                AND u.sex=#{sex}
            </if>
            <if test="role!=null">
                AND r.role_name=#{role}
            </if>
            <if test="deptId!=null">
                AND d.id=#{deptId}
            </if>
            <if test="status!=null">
                AND u.status=#{status}
            </if>
            LIMIT #{start}, #{length}
    </select>
    <select id="searchUserCount" resultType="java.lang.Long">
        select count(distinct u.id)
        from tb_user u
        join tb_role r on JSON_CONTAINS (u.role, CONVERT (r.id, CHAR ) )
        WHERE 1=1
        <if test="name!=null">
            AND u.name LIKE "%${name}%"
        </if>
        <if test="sex!=null">
            AND u.sex=#{sex}
        </if>
        <if test="role!=null">
            AND r.role_name=#{role}
        </if>
        <if test="deptId!=null">
            AND u.dept_id=#{deptId}
        </if>
        <if test="status!=null">
            AND u.status=#{status}
        </if>
    </select>
    <select id="searchUserRoles" resultType="java.lang.String">
        select r.role_name as roleName
        from tb_user u
        join tb_role r on json_contains(u.role, convert(r.id, char ))
        where u.id = #{userId}
    </select>

    <select id="searchNameAndDept" resultType="java.util.HashMap" parameterType="int">
        select u.name, d.dept_name as dept
        from tb_user u left join tb_dept d on u.dept_id = d.id
        where u.id = #{userId} and u.status = 1;
    </select>

    <select id="searchEmailAndName" resultType="java.util.HashMap" parameterType="int">
        select u.username, CAST(AES_DECRYPT(UNHEX(u.password),u.username) AS CHAR) AS password,
               u.sex,
               u.`name`, u.email, d.dept_name as dept
        from tb_user u
        left join tb_dept d on u.dept_id = d.id
        where u.id = #{id}
    </select>

</mapper>